
ADD_CUSTOM_TARGET(depend)

### glm
MESSAGE("Adding dependency: glm")

SET(GLM_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/glm" PARENT_SCOPE)

ADD_CUSTOM_TARGET(glm)
ADD_DEPENDENCIES(depend glm)

### lua
MESSAGE("Adding dependency: lua")

SET(LUA_OPTIONS
)

IF(MSVC)
    SET(LUA_OPTIONS
        -DLUA_BUILD_AS_DLL=OFF
        -DBUILD_SHARED_LIBS=OFF
    )
ENDIF()

SET(LUA_INCLUDE_DIRS
    "${CMAKE_SOURCE_DIR}/depend/lua/src"
    "${CMAKE_BINARY_DIR}/depend/lua"
    PARENT_SCOPE
)

FILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/depend/lua)
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}"
        ${CMAKE_SOURCE_DIR}/depend/lua ${LUA_OPTIONS}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/lua
)

IF (MSVC)
    SET(LUA_LIBRARIES_DEBUG "${CMAKE_BINARY_DIR}/depend/lua/Debug/lua.lib")
    SET(LUA_LIBRARIES_DEBUG "${LUA_LIBRARIES_DEBUG}" PARENT_SCOPE)
    SET(LUA_LIBRARIES_RELEASE "${CMAKE_BINARY_DIR}/depend/lua/Release/lua.lib")
    SET(LUA_LIBRARIES_RELEASE "${LUA_LIBRARIES_RELEASE}" PARENT_SCOPE)

    ADD_CUSTOM_COMMAND(
        OUTPUT ${LUA_LIBRARIES_DEBUG}
        COMMAND ${CMAKE_COMMAND} --build . --config Debug --target liblua
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/lua
    )
    ADD_CUSTOM_COMMAND(
        OUTPUT ${LUA_LIBRARIES_RELEASE}
        COMMAND ${CMAKE_COMMAND} --build . --config Release --target liblua
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/lua
    )
    ADD_CUSTOM_TARGET(lua DEPENDS ${LUA_LIBRARIES_DEBUG} ${LUA_LIBRARIES_RELEASE})
ELSE()
    SET(LUA_LIBRARIES "${CMAKE_BINARY_DIR}/depend/lua/liblua.so")
    SET(LUA_LIBRARIES "${LUA_LIBRARIES}" PARENT_SCOPE)

    ADD_CUSTOM_COMMAND(
        OUTPUT ${LUA_LIBRARIES}
        COMMAND ${CMAKE_COMMAND} --build . --target liblua
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/lua
    )
    ADD_CUSTOM_TARGET(lua DEPENDS ${LUA_LIBRARIES})
ENDIF()
ADD_DEPENDENCIES(depend lua)

### GLFW
MESSAGE("Adding dependency: glfw")

SET(GLFW_OPTIONS
    -DGLFW_BUILD_EXAMPLES=OFF
    -DGLFW_BUILD_TESTS=OFF
    -DGLFW_BUILD_DOCS=OFF
    -DGLFW_INSTALL=OFF
)

IF(NOT MSVC)
    SET(GLFW_OPTIONS ${GLFW_OPTIONS} -DBUILD_SHARED_LIBS=ON)
ENDIF()

SET(GLFW_INCLUDE_DIRS
    "${CMAKE_SOURCE_DIR}/depend/glfw/include"
    PARENT_SCOPE
)

FILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/depend/glfw)
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}"
        ${CMAKE_SOURCE_DIR}/depend/glfw ${GLFW_OPTIONS}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/glfw
)

IF (MSVC)
    SET(GLFW_LIBRARIES_DEBUG "${CMAKE_BINARY_DIR}/depend/glfw/src/Debug/glfw3.lib")
    SET(GLFW_LIBRARIES_DEBUG "${GLFW_LIBRARIES_DEBUG}" PARENT_SCOPE)
    SET(GLFW_LIBRARIES_RELEASE "${CMAKE_BINARY_DIR}/depend/glfw/src/Release/glfw3.lib")
    SET(GLFW_LIBRARIES_RELEASE "${GLFW_LIBRARIES_RELEASE}" PARENT_SCOPE)

    ADD_CUSTOM_COMMAND(
        OUTPUT ${GLFW_LIBRARIES_DEBUG}
        COMMAND ${CMAKE_COMMAND} --build . --config Debug --target glfw
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/glfw
    )
    ADD_CUSTOM_COMMAND(
        OUTPUT ${GLFW_LIBRARIES_RELEASE}
        COMMAND ${CMAKE_COMMAND} --build . --config Release --target glfw
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/glfw
    )
    ADD_CUSTOM_TARGET(glfw DEPENDS ${GLFW_LIBRARIES_DEBUG} ${GLFW_LIBRARIES_RELEASE})
ELSE()
    SET(GLFW_LIBRARIES "${CMAKE_BINARY_DIR}/depend/glfw/src/libglfw.so")
    SET(GLFW_LIBRARIES "${GLFW_LIBRARIES}" PARENT_SCOPE)

    ADD_CUSTOM_COMMAND(
        OUTPUT ${GLFW_LIBRARIES}
        COMMAND ${CMAKE_COMMAND} --build . --target glfw
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/glfw
    )
    ADD_CUSTOM_TARGET(glfw DEPENDS ${GLFW_LIBRARIES})
ENDIF()
ADD_DEPENDENCIES(depend glfw)


### OpenAL
MESSAGE("Adding dependency: openal")

SET(OPENAL_OPTIONS
    -DALSOFT_UTILS=OFF
    -DALSOFT_EXAMPLES=OFF
    -DALSOFT_TESTS=OFF
    -DALSOFT_INSTALL=OFF
)

SET(OPENAL_INCLUDE_DIRS
    "${CMAKE_SOURCE_DIR}/depend/openal/include"
    "${CMAKE_BINARY_DIR}/depend/openal"
    PARENT_SCOPE
)

FILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/depend/openal)
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}"
        ${CMAKE_SOURCE_DIR}/depend/openal ${OPENAL_OPTIONS}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/openal
)

IF (MSVC)
    SET(OPENAL_LIBRARIES_DEBUG "${CMAKE_BINARY_DIR}/depend/openal/Debug/OpenAL32.lib")
    SET(OPENAL_LIBRARIES_DEBUG "${OPENAL_LIBRARIES_DEBUG}" PARENT_SCOPE)
    SET(OPENAL_LIBRARIES_RELEASE "${CMAKE_BINARY_DIR}/depend/openal/Release/OpenAL32.lib")
    SET(OPENAL_LIBRARIES_RELEASE "${OPENAL_LIBRARIES_RELEASE}" PARENT_SCOPE)

    ADD_CUSTOM_COMMAND(
        OUTPUT ${OPENAL_LIBRARIES_DEBUG}
        COMMAND ${CMAKE_COMMAND} --build . --config Debug --target openal
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/openal
    )
    ADD_CUSTOM_COMMAND(
        OUTPUT ${OPENAL_LIBRARIES_RELEASE}
        COMMAND ${CMAKE_COMMAND} --build . --config Release --target openal
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/openal
    )
    ADD_CUSTOM_TARGET(openal DEPENDS ${OPENAL_LIBRARIES_DEBUG} ${OPENAL_LIBRARIES_RELEASE})
ELSE()
    SET(OPENAL_LIBRARIES "${CMAKE_BINARY_DIR}/depend/openal/libopenal.so")
    SET(OPENAL_LIBRARIES "${OPENAL_LIBRARIES}" PARENT_SCOPE)

    ADD_CUSTOM_COMMAND(
        OUTPUT ${OPENAL_LIBRARIES}
        COMMAND ${CMAKE_COMMAND} --build . --target OpenAL
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/openal
    )
    ADD_CUSTOM_TARGET(openal DEPENDS ${OPENAL_LIBRARIES})
ENDIF()
ADD_DEPENDENCIES(depend openal)

### ASSIMP
MESSAGE("Adding dependency: assimp")

SET(ASSIMP_OPTIONS
    -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
    -DASSIMP_BUILD_SAMPLES=OFF
    -DASSIMP_BUILD_TESTS=OFF
)

SET(ASSIMP_INCLUDE_DIRS
    "${CMAKE_SOURCE_DIR}/depend/assimp/code"
	"${CMAKE_SOURCE_DIR}/depend/assimp/include"
	"${CMAKE_BINARY_DIR}/depend/assimp/include"
    PARENT_SCOPE
)

FILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/depend/assimp)
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}"
    ${CMAKE_SOURCE_DIR}/depend/assimp ${ASSIMP_OPTIONS}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/assimp
)

IF (MSVC)
    SET(ASSIMP_OPTIONS
        -DASSIMP_BUILD_ZLIB=ON
        ${ASSIMP_OPTIONS}
    )

	SET(ASSIMP_LIBRARIES_DEBUG "${CMAKE_BINARY_DIR}/depend/assimp/code/Debug/assimp-vc140-mt.lib"
                               "${CMAKE_BINARY_DIR}/depend/assimp/contrib/irrXML/Debug/IrrXML.lib"
                               "${CMAKE_BINARY_DIR}/depend/assimp/contrib/zlib/Debug/zlibd.lib")
    SET(ASSIMP_LIBRARIES_DEBUG "${ASSIMP_LIBRARIES_DEBUG}" PARENT_SCOPE)
    SET(ASSIMP_LIBRARIES_RELEASE "${CMAKE_BINARY_DIR}/depend/assimp/code/Release/assimp-vc140-mt.lib"
                                 "${CMAKE_BINARY_DIR}/depend/assimp/contrib/irrXML/Release/IrrXML.lib"
                                 "${CMAKE_BINARY_DIR}/depend/assimp/contrib/zlib/Release/zlib.lib")
    SET(ASSIMP_LIBRARIES_RELEASE "${ASSIMP_LIBRARIES_RELEASE}" PARENT_SCOPE)

    SET(ASSIMP_DLL_DEBUG "${CMAKE_BINARY_DIR}/depend/assimp/code/Debug/assimp-vc140-mt.dll")
    SET(ASSIMP_DLL_RELEASE "${CMAKE_BINARY_DIR}/depend/assimp/code/Release/assimp-vc140-mt.dll")

	ADD_CUSTOM_COMMAND(
        OUTPUT ${ASSIMP_LIBRARIES_DEBUG}
        COMMAND ${CMAKE_COMMAND} --build . --config Debug --target zlib
        COMMAND ${CMAKE_COMMAND} --build . --config Debug --target assimp
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/assimp
    )
    ADD_CUSTOM_COMMAND(
        OUTPUT ${ASSIMP_LIBRARIES_RELEASE}
        COMMAND ${CMAKE_COMMAND} --build . --config Release --target zlib
        COMMAND ${CMAKE_COMMAND} --build . --config Release --target assimp
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/assimp
    )

	ADD_CUSTOM_TARGET(assimp DEPENDS assimp-dll ${ASSIMP_LIBRARIES_DEBUG} ${ASSIMP_LIBRARIES_RELEASE})

    FILE(MAKE_DIRECTORY "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG}" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE}")
    ADD_CUSTOM_COMMAND(
        OUTPUT
        TARGET assimp
        DEPENDS ${ASSIMP_LIBRARIES_DEBUG} ${ASSIMP_LIBRARIES_RELEASE}
        COMMAND ${CMAKE_COMMAND} -E copy "${ASSIMP_DLL_DEBUG}" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG}/"
        COMMAND ${CMAKE_COMMAND} -E copy "${ASSIMP_DLL_RELEASE}" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE}/"
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/assimp
    )
ELSE()
	SET(ASSIMP_LIBRARIES "${CMAKE_BINARY_DIR}/depend/assimp/code/libassimp.so"
                         "${CMAKE_BINARY_DIR}/depend/assimp/contrib/irrXML/libIrrXML.a")
    SET(ASSIMP_LIBRARIES "${ASSIMP_LIBRARIES}" PARENT_SCOPE)

    ADD_CUSTOM_COMMAND(
        OUTPUT ${ASSIMP_LIBRARIES}
        COMMAND ${CMAKE_COMMAND} --build . --target assimp
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/assimp
    )
    ADD_CUSTOM_TARGET(assimp DEPENDS ${ASSIMP_LIBRARIES})
ENDIF()
ADD_DEPENDENCIES(depend assimp)

### SOL2
MESSAGE("Adding dependency: sol2")

SET(SOL2_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/sol2/sol" PARENT_SCOPE)

ADD_CUSTOM_TARGET(sol2)
ADD_DEPENDENCIES(depend sol2)

SET_TARGET_PROPERTIES(
    depend glm lua glfw openal assimp sol2
    PROPERTIES FOLDER "Depend"
)
